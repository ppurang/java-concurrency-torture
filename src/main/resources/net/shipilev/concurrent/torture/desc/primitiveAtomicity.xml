<testsuite name="Primitive atomicity tests">

    <test name="net.shipilev.concurrent.torture.tests.primitiveAtomicity.DoubleAtomicityTest">
        <contributed-by>Aleksey Shipilev (aleksey.shipilev@oracle.com)</contributed-by>
        <description>
            Tests if primitive doubles experience non-atomic updates.
        </description>
        <case>
            <match>[0, 0, 0, 0, 0, 0, 0, 0]</match>
            <expect>REQUIRED</expect>
            <description>
                Default value for the field. Observers are allowed to see the default value for the field,
                because there is the data race between reader and writer.
            </description>
        </case>
        <case>
            <match>[-1, -1, -1, -1, -1, -1, -1, -1]</match>
            <expect>REQUIRED</expect>
            <description>
                The value set by the actor thread. Observer sees the complete update.
            </description>
        </case>
        <case>
            <match>[0, 0, 0, 0, -1, -1, -1, -1]</match>
            <match>[-1, -1, -1, -1, 0, 0, 0, 0]</match>
            <expect>KNOWN_ACCEPTABLE</expect>
            <description>
                Seeing the torn value. This is specifically allowed by <![CDATA[<a href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.7">JLS 17.7</a>]]>.
                This is not a surprising behavior on some 32-bit systems which do not have full-width 64-bit instructions.
            </description>
        </case>
        <unmatched>
            <expect>FORBIDDEN</expect>
            <description>
                This case is not expected.
            </description>
        </unmatched>
    </test>

    <test name="net.shipilev.concurrent.torture.tests.primitiveAtomicity.VolatileDoubleAtomicityTest">
        <contributed-by>Aleksey Shipilev (aleksey.shipilev@oracle.com)</contributed-by>
        <description>
            Tests if volatile primitive doubles experience non-atomic updates.
        </description>
        <case>
            <match>[0, 0, 0, 0, 0, 0, 0, 0]</match>
            <expect>REQUIRED</expect>
            <description>
                Default value for the field. Observers are allowed to see the default value for the field,
                because there is the data race between reader and writer.
            </description>
        </case>
        <case>
            <match>[-1, -1, -1, -1, -1, -1, -1, -1]</match>
            <expect>REQUIRED</expect>
            <description>
                The value set by the actor thread. Observer sees the complete update.
            </description>
        </case>
        <unmatched>
            <expect>FORBIDDEN</expect>
            <description>
                This case is not expected.
            </description>
        </unmatched>
    </test>

    <test name="net.shipilev.concurrent.torture.tests.primitiveAtomicity.IntAtomicityTest">
        <contributed-by>Aleksey Shipilev (aleksey.shipilev@oracle.com)</contributed-by>
        <description>
            Tests if primitive integers experience non-atomic updates.
        </description>
        <case>
            <match>[0, 0, 0, 0]</match>
            <expect>REQUIRED</expect>
            <description>
                Default value for the field. Observers are allowed to see the default value for the field,
                because there is the data race between reader and writer.
            </description>
        </case>
        <case>
            <match>[-1, -1, -1, -1]</match>
            <expect>REQUIRED</expect>
            <description>
                The value set by the actor thread. Observer sees the complete update.
            </description>
        </case>
        <unmatched>
            <expect>FORBIDDEN</expect>
            <description>
                This case is not expected.
            </description>
        </unmatched>
    </test>

    <test name="net.shipilev.concurrent.torture.tests.primitiveAtomicity.VolatileIntAtomicityTest">
        <contributed-by>Aleksey Shipilev (aleksey.shipilev@oracle.com)</contributed-by>
        <description>
            Tests if primitive integers experience non-atomic updates.
        </description>
        <case>
            <match>[0, 0, 0, 0]</match>
            <expect>REQUIRED</expect>
            <description>
                Default value for the field. Observers are allowed to see the default value for the field,
                because there is the data race between reader and writer.
            </description>
        </case>
        <case>
            <match>[-1, -1, -1, -1]</match>
            <expect>REQUIRED</expect>
            <description>
                The value set by the actor thread. Observer sees the complete update.
            </description>
        </case>
        <unmatched>
            <expect>FORBIDDEN</expect>
            <description>
                This case is not expected.
            </description>
        </unmatched>
    </test>

    <test name="net.shipilev.concurrent.torture.tests.primitiveAtomicity.FloatAtomicityTest">
        <contributed-by>Aleksey Shipilev (aleksey.shipilev@oracle.com)</contributed-by>
        <description>
            Tests if primitive integers experience non-atomic updates.
        </description>
        <case>
            <match>[0, 0, 0, 0]</match>
            <expect>REQUIRED</expect>
            <description>
                Default value for the field. Observers are allowed to see the default value for the field,
                because there is the data race between reader and writer.
            </description>
        </case>
        <case>
            <match>[-1, -1, -1, -1]</match>
            <expect>REQUIRED</expect>
            <description>
                The value set by the actor thread. Observer sees the complete update.
            </description>
        </case>
        <unmatched>
            <expect>FORBIDDEN</expect>
            <description>
                This case is not expected.
            </description>
        </unmatched>
    </test>

    <test name="net.shipilev.concurrent.torture.tests.primitiveAtomicity.VolatileFloatAtomicityTest">
        <contributed-by>Aleksey Shipilev (aleksey.shipilev@oracle.com)</contributed-by>
        <description>
            Tests if primitive integers experience non-atomic updates.
        </description>
        <case>
            <match>[0, 0, 0, 0]</match>
            <expect>REQUIRED</expect>
            <description>
                Default value for the field. Observers are allowed to see the default value for the field,
                because there is the data race between reader and writer.
            </description>
        </case>
        <case>
            <match>[-1, -1, -1, -1]</match>
            <expect>REQUIRED</expect>
            <description>
                The value set by the actor thread. Observer sees the complete update.
            </description>
        </case>
        <unmatched>
            <expect>FORBIDDEN</expect>
            <description>
                This case is not expected.
            </description>
        </unmatched>
    </test>

    <test name="net.shipilev.concurrent.torture.tests.primitiveAtomicity.LongAtomicityTest">
        <contributed-by>Aleksey Shipilev (aleksey.shipilev@oracle.com)</contributed-by>
        <description>
            Tests if primitive longs experience non-atomic updates.
        </description>
        <case>
            <match>[0, 0, 0, 0, 0, 0, 0, 0]</match>
            <expect>REQUIRED</expect>
            <description>
                Default value for the field. Observers are allowed to see the default value for the field,
                because there is the data race between reader and writer.
            </description>
        </case>
        <case>
            <match>[-1, -1, -1, -1, -1, -1, -1, -1]</match>
            <expect>REQUIRED</expect>
            <description>
                The value set by the actor thread. Observer sees the complete update.
            </description>
        </case>
        <case>
            <match>[0, 0, 0, 0, -1, -1, -1, -1]</match>
            <match>[-1, -1, -1, -1, 0, 0, 0, 0]</match>
            <expect>KNOWN_ACCEPTABLE</expect>
            <description>
                Seeing the torn value. This is specifically allowed by <![CDATA[<a href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.7">JLS 17.7</a>]]>.
                This is not a surprising behavior on some 32-bit systems which do not have full-width 64-bit instructions.
            </description>
        </case>
        <unmatched>
            <expect>FORBIDDEN</expect>
            <description>
                This case is not expected.
            </description>
        </unmatched>
    </test>

    <test name="net.shipilev.concurrent.torture.tests.primitiveAtomicity.VolatileLongAtomicityTest">
        <contributed-by>Aleksey Shipilev (aleksey.shipilev@oracle.com)</contributed-by>
        <description>
            Tests if volatile longs experience non-atomic updates.
        </description>
        <case>
            <match>[0, 0, 0, 0, 0, 0, 0, 0]</match>
            <expect>REQUIRED</expect>
            <description>
                Default value for the field. Observers are allowed to see the default value for the field,
                because there is the data race between reader and writer.
            </description>
        </case>
        <case>
            <match>[-1, -1, -1, -1, -1, -1, -1, -1]</match>
            <expect>REQUIRED</expect>
            <description>
                The value set by the actor thread. Observer sees the complete update.
            </description>
        </case>
        <unmatched>
            <expect>FORBIDDEN</expect>
            <description>
                Seeing other values is forbidden by JMM.
            </description>
        </unmatched>
    </test>

    <test name="net.shipilev.concurrent.torture.tests.primitiveAtomicity.CharAtomicityTest">
        <contributed-by>Aleksey Shipilev (aleksey.shipilev@oracle.com)</contributed-by>
        <description>
            Tests if primitive chars experience non-atomic updates.
        </description>
        <case>
            <match>[0, 0]</match>
            <expect>REQUIRED</expect>
            <description>
                Default value for the field. Observers are allowed to see the default value for the field,
                because there is the data race between reader and writer.
            </description>
        </case>
        <case>
            <match>[-1, -1]</match>
            <expect>REQUIRED</expect>
            <description>
                The value set by the actor thread. Observer sees the complete update.
            </description>
        </case>
        <case>
            <match>[0, -1]</match>
            <match>[-1, 0]</match>
            <expect>FORBIDDEN</expect>
            <description>
                Torn value had been read.
                This can be the known issue <![CDATA[<a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=8000805">CR 8000805</a>]]>.
            </description>
        </case>
        <unmatched>
            <expect>FORBIDDEN</expect>
            <description>
                This case is not expected.
            </description>
        </unmatched>
    </test>

    <test name="net.shipilev.concurrent.torture.tests.primitiveAtomicity.VolatileCharAtomicityTest">
        <contributed-by>Aleksey Shipilev (aleksey.shipilev@oracle.com)</contributed-by>
        <description>
            Tests if primitive chars experience non-atomic updates.
        </description>
        <case>
            <match>[0, 0]</match>
            <expect>REQUIRED</expect>
            <description>
                Default value for the field. Observers are allowed to see the default value for the field,
                because there is the data race between reader and writer.
            </description>
        </case>
        <case>
            <match>[-1, -1]</match>
            <expect>REQUIRED</expect>
            <description>
                The value set by the actor thread. Observer sees the complete update.
            </description>
        </case>
        <case>
            <match>[0, -1]</match>
            <match>[-1, 0]</match>
            <expect>FORBIDDEN</expect>
            <description>
                Torn value had been read.
                This can be the known issue <![CDATA[<a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=8000805">CR 8000805</a>]]>.
            </description>
        </case>
        <unmatched>
            <expect>FORBIDDEN</expect>
            <description>
                This case is not expected.
            </description>
        </unmatched>
    </test>

    <test name="net.shipilev.concurrent.torture.tests.primitiveAtomicity.ShortAtomicityTest">
        <contributed-by>Aleksey Shipilev (aleksey.shipilev@oracle.com)</contributed-by>
        <description>
            Tests if primitive shorts experience non-atomic updates.
        </description>
        <case>
            <match>[0, 0]</match>
            <expect>REQUIRED</expect>
            <description>
                Default value for the field. Observers are allowed to see the default value for the field,
                because there is the data race between reader and writer.
            </description>
        </case>
        <case>
            <match>[-1, -1]</match>
            <expect>REQUIRED</expect>
            <description>
                The value set by the actor thread. Observer sees the complete update.
            </description>
        </case>
        <case>
            <match>[0, -1]</match>
            <match>[-1, 0]</match>
            <expect>FORBIDDEN</expect>
            <description>
                Torn value had been read.
                This can be the known issue <![CDATA[<a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=8000805">CR 8000805</a>]]>.
            </description>
        </case>
        <unmatched>
            <expect>FORBIDDEN</expect>
            <description>
                This case is not expected.
            </description>
        </unmatched>
    </test>

    <test name="net.shipilev.concurrent.torture.tests.primitiveAtomicity.VolatileShortAtomicityTest">
        <contributed-by>Aleksey Shipilev (aleksey.shipilev@oracle.com)</contributed-by>
        <description>
            Tests if primitive shorts experience non-atomic updates.
        </description>
        <case>
            <match>[0, 0]</match>
            <expect>REQUIRED</expect>
            <description>
                Default value for the field. Observers are allowed to see the default value for the field,
                because there is the data race between reader and writer.
            </description>
        </case>
        <case>
            <match>[-1, -1]</match>
            <expect>REQUIRED</expect>
            <description>
                The value set by the actor thread. Observer sees the complete update.
            </description>
        </case>
        <case>
            <match>[0, -1]</match>
            <match>[-1, 0]</match>
            <expect>FORBIDDEN</expect>
            <description>
                Torn value had been read.
                This can be the known issue <![CDATA[<a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=8000805">CR 8000805</a>]]>.
            </description>
        </case>
        <unmatched>
            <expect>FORBIDDEN</expect>
            <description>
                This case is not expected.
            </description>
        </unmatched>
    </test>

    <test name="net.shipilev.concurrent.torture.tests.primitiveAtomicity.ByteAtomicityTest">
        <contributed-by>Aleksey Shipilev (aleksey.shipilev@oracle.com)</contributed-by>
        <description>
            Tests if primitive bytes experience non-atomic updates.
        </description>
        <case>
            <match>[0, 0]</match>
            <expect>REQUIRED</expect>
            <description>
                Default value for the field. Observers are allowed to see the default value for the field,
                because there is the data race between reader and writer.
            </description>
        </case>
        <case>
            <match>[15, 15]</match>
            <expect>REQUIRED</expect>
            <description>
                The value set by the actor thread. Observer sees the complete update.
            </description>
        </case>
        <case>
            <match>[0, 15]</match>
            <match>[15, 0]</match>
            <expect>FORBIDDEN</expect>
            <description>
                Torn value had been read.
                This can be the known issue <![CDATA[<a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=8000805">CR 8000805</a>]]>.
            </description>
        </case>
        <unmatched>
            <expect>FORBIDDEN</expect>
            <description>
                This case is not expected.
            </description>
        </unmatched>
    </test>

    <test name="net.shipilev.concurrent.torture.tests.primitiveAtomicity.VolatileByteAtomicityTest">
        <contributed-by>Aleksey Shipilev (aleksey.shipilev@oracle.com)</contributed-by>
        <description>
            Tests if primitive volatile bytes experience non-atomic updates.
        </description>
        <case>
            <match>[0, 0]</match>
            <expect>REQUIRED</expect>
            <description>
                Default value for the field. Observers are allowed to see the default value for the field,
                because there is the data race between reader and writer.
            </description>
        </case>
        <case>
            <match>[15, 15]</match>
            <expect>REQUIRED</expect>
            <description>
                The value set by the actor thread. Observer sees the complete update.
            </description>
        </case>
        <case>
            <match>[0, 15]</match>
            <match>[15, 0]</match>
            <expect>FORBIDDEN</expect>
            <description>
                Torn value had been read.
                This can be the known issue <![CDATA[<a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=8000805">CR 8000805</a>]]>.
            </description>
        </case>
        <unmatched>
            <expect>FORBIDDEN</expect>
            <description>
                This case is not expected.
            </description>
        </unmatched>
    </test>


</testsuite>